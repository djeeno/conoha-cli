#!/bin/sh
# shellcheck disable=SC1090

##
# If in non interactive shell ( "$-" not containing "i" ),
# execute script as command.
##
if ! { echo "$-" | grep -q i; }; then
# -- Non Interactive ----------------

# If an error occurs, EXIT abnormally.
set -e -o pipefail

##
# constants
##
CONOHA_VERSION='0.0.2'
CONOHA_PROGRAM_NAME="$(basename -- "$0")"



##
# common
##
PrintStderr() {
  echo "$*" 1>&2
}

CheckDependency() {
  code=0
  for cmd in "$@"; do
    if ! command -v -- "${cmd}" 1>/dev/null; then
      PrintStderr "\"${cmd}\" not found in \$PATH"
      code=$((code+1))
    fi
  done
  [ "${code}" -eq 0 ] || exit 1
}

CONOHA_CREDENTIALS_FILE="$HOME/.conoha/credentials"

ConoHaConfigure() {
  if [ -e "${CONOHA_CREDENTIALS_FILE}" ]; then
    PrintStderr "already exist: ${CONOHA_CREDENTIALS_FILE}"
    exit 1
  fi
  mkdir -p "$(dirname "${CONOHA_CREDENTIALS_FILE}")"
  echo "ref. https://manage.conoha.jp/API/"
  printf '%s' 'ConoHa Tenant ID: '
  read -r CONOHA_TENANT_ID
  if [ -z "${CONOHA_TENANT_ID}" ]; then
    PrintStderr "Credentials parameters are not set"
    exit 1
  fi
  printf '%s' 'ConoHa API Account Username: '
  read -r CONOHA_API_ACCOUNT_USERNAME
  stty -echo
  printf '%s' 'ConoHa API Account Password: '
  if [ -z "${CONOHA_API_ACCOUNT_USERNAME}" ]; then
    PrintStderr "Credentials parameters are not set"
    exit 1
  fi
  read -r CONOHA_API_ACCOUNT_PASSWORD
  stty echo
  echo
  if [ -z "${CONOHA_API_ACCOUNT_PASSWORD}" ]; then
    PrintStderr "Credentials parameters are not set"
    exit 1
  fi
  {
    echo "CONOHA_TENANT_ID=${CONOHA_TENANT_ID}"
    echo "CONOHA_API_ACCOUNT_USERNAME=${CONOHA_API_ACCOUNT_USERNAME}"
    echo "CONOHA_API_ACCOUNT_PASSWORD=${CONOHA_API_ACCOUNT_PASSWORD}"
  } > "${CONOHA_CREDENTIALS_FILE}"
  chown -R "$(id -u)":"$(id -g)" "$(dirname "${CONOHA_CREDENTIALS_FILE}")"
  chmod -R go-rwx "$(dirname "${CONOHA_CREDENTIALS_FILE}")"
}

ConoHaSetCredentials() {
  CheckDependency curl jq
  if [ -f "${CONOHA_CREDENTIALS_FILE}" ] && [ -r "${CONOHA_CREDENTIALS_FILE}" ]; then
    . "${CONOHA_CREDENTIALS_FILE}"
  else
    PrintStderr "Credentials file does not found: ${CONOHA_CREDENTIALS_FILE}"
    PrintStderr "For set credentials, run:"
    PrintStderr "  $ conoha configure"
    exit 1
  fi
  conoha_api_endpoint="https://identity.tyo1.conoha.io/v2.0/tokens"
  CONOHA_TOKEN=$(
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -d '{"auth":{"passwordCredentials":{"username":"'"${CONOHA_API_ACCOUNT_USERNAME}"'","password":"'"${CONOHA_API_ACCOUNT_PASSWORD}"'"},"tenantId":"'"${CONOHA_TENANT_ID}"'"}}' \
      | jq -r '.access.token.id'
  )
  if [ -z "${CONOHA_TOKEN}" ] || [ "${CONOHA_TOKEN}" = null ]; then
    PrintStderr "CONOHA_TOKEN is null"
    PrintStderr "Please check credentials file: ${CONOHA_CREDENTIALS_FILE}"
    exit 1
  fi
}

ConoHaBase64Encode() {
CheckDependency base64 openssl
if command -v base64 1>/dev/null; then
  base64 </dev/stdin
elif command -v openssl 1>/dev/null; then
  openssl base64 </dev/stdin
else
  echo "You need \"base64\" or \"openssl\""
  exit 1
fi
}

ConoHaJSON() {
  if command -v jq 1>/dev/null; then
    "$(command -v jq)" . </dev/stdin
  elif command -v python 1>/dev/null; then
    "$(command -v python)" -m json.tool </dev/stdin
  elif command -v ruby 1>/dev/null; then
    "$(command -v ruby)" -r json -e 'puts JSON.pretty_generate(JSON.parse(STDIN.read))' </dev/stdin
  elif command -v perl 1>/dev/null; then
    # shellcheck disable=SC2016
    "$(command -v perl)" -MEncode -MJSON::PP -e '$json=JSON::PP->new->pretty; $obj=$json->decode(decode_utf8(join("",(<STDIN>)))); print encode_utf8($json->encode($obj))'
  else
    # plain output
    cat /dev/stdin
  fi
}



##
# flavors
##
ConoHaFlavorsList() {
  # ref. https://www.conoha.jp/docs/compute-get_flavors_list.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/flavors"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaFlavorsListSumally() {
  conoha_api_response=$(ConoHaFlavorsList "$@")
  echo "${conoha_api_response}" | jq '.flavors[] | { id, name }' | jq -s '{ flavors: . }'
  #echo "${conoha_api_response}" | jq '.flavors[] | { "Key": .name, "Value": .id }' | jq -s 'sort_by( .Key ) | from_entries | { flavors: . }'
}



##
# images
##
ConoHaImagesList() {
  # ref. https://www.conoha.jp/docs/compute-get_images_list.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/images"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H "Accept: application/json" \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaImagesListSumally() {
  conoha_api_response=$(ConoHaImagesList "$@")
  echo "${conoha_api_response}" | jq '.images[] | { id, name }' | jq -s '{ images: . }'
  #echo "${conoha_api_response}" | jq '.images[] | { "Key": .name, "Value": .id }' | jq -s 'sort_by( .Key ) | from_entries | { images: . }'
}



##
# keypairs
##
ConoHaKeypairsList() {
  # ref. https://www.conoha.jp/docs/compute-get_keypairs.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/os-keypairs"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaKeypairsUpload() {
  # ref. https://www.conoha.jp/docs/compute-get_keypairs.html
  conoha_key_name="${1:?"$(printf '\n%s' "Set \$1 as Keypair Name")"}"
  conoha_public_key="${2:?"$(printf '\n%s\n%s\n%s' "Set \$2 as Public Key (e.g. \"ssh-rsa AAAAB3NzaC1yc2EAAAA... foobar@localhost\" or \"\$(cat ~/.ssh/id_rsa.pub)\")" "See:" "  $ conoha subnets list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/os-keypairs"
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d '{"keypair": {"name": "'"${conoha_key_name}"'","public_key": "'"${conoha_public_key}"'"}}' \
  )
  echo "${conoha_api_response}" | jq .
}



##
# networks
##
ConoHaNetworksCreateLocalNetwork() {
  # ref. https://www.conoha.jp/docs/neutron-add_network.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/networks"
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaNetworksDelete() {
  # ref. https://www.conoha.jp/docs/neutron-remove_network.html
  conoha_network_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Network ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha networks list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/networks/${conoha_network_id}"
    curl -sS -X DELETE "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaNetworksList() {
  # ref. https://www.conoha.jp/docs/neutron-get_networks_list.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/networks"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}



##
# ports
##
ConoHaPortsList() {
  # ref. https://www.conoha.jp/docs/neutron-get_ports_list.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/ports"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaPortsListSumally() {
  conoha_api_response=$(ConoHaPortsList "$@")
  echo "${conoha_api_response}" | jq '.ports[] | { id, network_id, fixed_ips }' | jq -s '{ ports: . }'
}

ConoHaPortsCreate() {
  conoha_network_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Network ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha subnets list")"}"
  conoha_subnet_id="${2:?"$(printf '\n%s\n%s\n%s' "Set \$2 as Subnet ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha subnets list")"}"
  conoha_ipaddress="${3:?"$(printf '\n%s\n%s\n%s' "Set \$3 as IPAddress (e.g. \"8.8.8.8\")" "See:" "  $ conoha subnets list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_default_security_groups="$(ConoHaSecurityGroupsList | jq '.security_groups[] | select( (.name == "gncs-ipv4-all") or (.name == "default") ) | .id' | jq -cs .)"
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/ports"
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d'{"port":{"network_id":"'"${conoha_network_id}"'","fixed_ips":[{"ip_address":"'"${conoha_ipaddress}"'","subnet_id":"'"${conoha_subnet_id}"'"}],"security_groups":'"${conoha_default_security_groups}"'}}' \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaPortsDelete() {
  conoha_port_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Port ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha ports list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/${conoha_port_id}"
    curl -sS -X DELETE "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}



##
# securitygroups
##
ConoHaSecurityGroupsList() {
  # ref. https://www.conoha.jp/docs/neutron-get_rules_on_secgroup.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/security-groups"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaSecurityGroupsListSumally() {
  conoha_api_response=$(ConoHaSecurityGroupsList "$@")
  echo "${conoha_api_response}" | jq '.security_groups[] | { tenant_id, description, id, name }' | jq -s '{ security_groups: . }'
}



##
# servers
##
ConoHaServersAttachPort() {
  conoha_server_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Server ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha servers list")"}"
  conoha_port_id="${2:?"$(printf '\n%s\n%s\n%s' "Set \$2 as Port ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha ports list")"}"
  ConoHaSetCredentials
  conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/${conoha_server_id}/os-interface"
  conoha_api_response=$(
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d '{"interfaceAttachment":{"port_id":"'"${conoha_port_id}"'"}}' \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersCreate() {
  # ref. https://www.conoha.jp/docs/compute-create_vm.html
  conoha_flavor_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as VM Flavor ID (e.g. \"d92b02ce-9a4f-4544-8d7f-ae8380bc08e7\")" "See:" "  $ conoha flavors list")"}"
  conoha_image_id="${2:?"$(printf '\n%s\n%s\n%s' "Set \$2 as VM Image ID (e.g. \"2322444e-9000-47a8-a425-45fdef52d031\")" "See:" "  $ conoha images list")"}"
  conoha_root_password="${3:?"$(printf '\n%s' "Set \$3 as VM OS Password (e.g. \"P@ssw0rd\")")"}"
  conoha_key_name="${4:?"$(printf '\n%s\n%s\n%s' "Set \$4 as VM OS Keypair Name (e.g. \"foobar\")" "See:" "  $ conoha keypairs list")"}"
  conoha_userdata_base64_encoded="${5:?"$(printf '\n%s\n%s\n%s' "Set \$5 as base64-encoded userdata (e.g. \"IyEvYmluL2Jhc2gK...\")" "If you want to encode base64, run:" "  $ cat \"\${YOUR_USER_DATA_FILE:?}\" | openssl base64")"}"
  conoha_name_tag="${6:?"$(printf '\n%s' "Set \$6 as VM Name Tag (e.g. \"bastion\")")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers"
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d '{"server":{"flavorRef":"'"${conoha_flavor_id}"'","imageRef":"'"${conoha_image_id}"'","adminPass":"'"${conoha_root_password}"'","key_name":"'"${conoha_key_name}"'","security_groups":[{"name":"default"},{"name":"gncs-ipv4-all"}],"user_data":"'"${conoha_userdata_base64_encoded}"'","metadata":{"instance_name_tag":"'"${conoha_name_tag}"'"}}}' \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersDelete() {
  # ref. https://www.conoha.jp/docs/compute-delete_vm.html
  conoha_server_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Server ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha servers list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/${conoha_server_id}"
    curl -sS -X DELETE "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersList() {
  # ref. https://www.conoha.jp/docs/compute-get_vms_list.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersListDetail() {
  # ref. https://www.conoha.jp/docs/compute-get_vms_detail.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/detail"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersListDetailSumally() {
  conoha_api_response=$(ConoHaServersListDetail "$@")
  echo "${conoha_api_response}" | jq '.servers[] | { name_tag: .metadata.instance_name_tag, id, name, status, addresses: [(.addresses[] | .[] | .addr)] }' | jq -s '{ servers: . }'
}

ConoHaServersListAttachedPorts() {
  # ref. https://www.conoha.jp/docs/compute-get_attached_ports_list.html
  conoha_server_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Server ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha servers list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/${conoha_server_id}/os-interface"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersStart() {
  conoha_server_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Server ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha servers list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/${conoha_server_id}/action"
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d '{"os-start":null}' \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersStop() {
  conoha_server_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Server ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha servers list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/${conoha_server_id}/action"
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d '{"os-stop":null}' \
  )
  echo "${conoha_api_response}" | jq .
}



##
# subnets
##
ConoHaSubnetsCreateLocalSubnet() {
  # ref. https://www.conoha.jp/docs/neutron-add_network.html
  conoha_subnet_network_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Network ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha networks list")"}"
  conoha_subnet_cidr="${2:?"$(printf '\n%s' "Set \$2 as Subnet CIDR (e.g. \"192.168.58.0/24\") bitmask require 21-27")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/subnets"
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d '{"subnet": {"network_id": "'"${conoha_subnet_network_id}"'", "cidr": "'"${conoha_subnet_cidr}"'"}}' \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaSubnetsDelete() {
  # ref. https://www.conoha.jp/docs/neutron-remove_subnet.html
  conoha_subnet_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Subnet ID (e.g. \"ffffffff-ffff-ffff-ffff-ffffffffffff\")" "See:" "  $ conoha subnets list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/subnets/${conoha_subnet_id}"
    curl -sS -X DELETE "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaSubnetsList() {
  # ref. https://www.conoha.jp/docs/neutron-get_subnets_list.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/subnets"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}



##
# tools
##
ConoHaToolsSubnetsListAdditionalIPAddresses() {
  conoha_api_response=$(ConoHaSubnetsList "$@")
  echo "${conoha_api_response}" | jq '.subnets[] | select(.cidr | match("/32"))' | jq -s '{ subnets: . }'
}

ConoHaToolsGetImageUbuntu1804() {
  conoha_api_response=$(ConoHaImagesList "$@")
  echo "${conoha_api_response}" | jq '.images | sort_by(.name) | .[] | select(.name | match("vmi-ubuntu-18.04-amd64-20gb"))'
}

ConoHaToolsGetFlavor512MB() {
  conoha_api_response=$(ConoHaFlavorsList "$@")
  echo "${conoha_api_response}" | jq '.flavors[] | select(.name == "g-512mb")'
}

ConoHaToolsGetFlavor1GB() {
  conoha_api_response=$(ConoHaFlavorsList "$@")
  echo "${conoha_api_response}" | jq '.flavors[] | select(.name == "g-1gb")'
}

ConoHaToolsServersCreateK8sClusterSingleMaster() {
  #set -x  ## for DEBUG
  conoha_log=~/.conoha.log
  touch "${conoha_log}"
  chmod go-rwx "${conoha_log}"
  conoha_key_file="${HOME}/.ssh/id_rsa"
  conoha_flavor_id="7eea7469-0d85-4f82-8050-6ae742394681"  ## g-1gb 810JPY/month
  conoha_image_id="1ae808e4-f4ee-4ee6-adfc-0ba8c2bf67f3"  ## vmi-ubuntu-18.04-amd64-20gb
  conoha_root_password=$(LANG=C LC_ALL=C tr -dc 0-9A-Za-z </dev/urandom | head -c 16 || true)
  conoha_key_name="k8s001"
  conoha_userdata_base64_encoded=$(curl -LRsS https://djeeno.gitlab.io/userdata/setup-k8s-master.sh | ConoHaBase64Encode)
  conoha_name_tag="k8s001master001"
  if [ "$(ConoHaKeypairsList | jq '.keypairs[] | select( .keypair.name == "'"${conoha_key_name}"'" ) | any(.)')" != true ]; then
    if ! grep -q ssh- "${conoha_key_file}.pub"; then
      PrintStderr "You need ${conoha_key_file}.pub"
      PrintStderr "  $ echo | ssh-keygen -t rsa -N '' -f \"${conoha_key_file}\""
      exit 1
    fi
    ConoHaKeypairsUpload "${conoha_key_name}" "$(cat ~/.ssh/id_rsa.pub)"
  else
    PrintStderr "Keypair \"${conoha_key_name}\" already exists so using it"
    PrintStderr "See:"
    PrintStderr "  $ conoha keypairs list | jq '.keypairs[] | select( .name == \"${conoha_key_name}\" )'"
  fi
  conoha_servers_list_detail_response=$(ConoHaServersListDetail)
  if [ "$(echo "${conoha_servers_list_detail_response}" | jq -r '.servers[] | select( .metadata.instance_name_tag == "'"${conoha_name_tag}"'" ) | any(.)')" != true ]; then
    conoha_server_create_response=$(ConoHaServersCreate "${conoha_flavor_id}" "${conoha_image_id}" "${conoha_root_password}" "${conoha_key_name}" "${conoha_userdata_base64_encoded}" "${conoha_name_tag}")
    echo "${conoha_server_create_response}" | jq -r . >>"${conoha_log}"
  else
    conoha_k8s_master_status=$(echo "${conoha_servers_list_detail_response}" | jq -r '.servers[] | select( .metadata.instance_name_tag == "'"${conoha_name_tag}"'" ) | .status')
    if [ "${conoha_k8s_master_status}" != "ACTIVE" ]; then
      PrintStderr "${conoha_name_tag} already exists, but status is \"${conoha_k8s_master_status}\""
      PrintStderr "See:"
      PrintStderr "  $ conoha servers list-detail | jq '.servers[] | select( .metadata.instance_name_tag == \"${conoha_name_tag}\" )'"
      exit 0
    fi
  fi
  conoha_servers_list_detail_response=$(ConoHaServersListDetail)
  SSH_USER="root"
  SSH_HOST=
  while true; do
    SSH_HOST=$(
      echo "${conoha_servers_list_detail_response}" | jq -r '.servers[] | select( .metadata.instance_name_tag == "'"${conoha_name_tag}"'" ) | .addresses | .[] | .[] | select( .version == 4 ) | .addr'
    )
    [ -z "${SSH_HOST}" ] || break
    sleep 5
    PrintStderr waiting...
  done
  SSH_OPTIONS="-o IdentityFile=${conoha_key_file} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o User=${SSH_USER}"
  # shellcheck disable=SC2086
  echo ssh ${SSH_OPTIONS} "${SSH_HOST}"
}



##
# main
##
ConohaMain() {  ## main start DO NOT REMOVE ##
  sub_command="$1"
  sub2_command="$2"

  if [ "$2" ]; then shift || true; fi
  if [ "$1" ]; then shift || true; fi

  # shellcheck disable=SC2034
  conoha_main_method_content=$(
    conoha_main_tail=$(tail -n +"$(grep -n "## main start DO NOT REMOVE ##$" "$0" | cut -d: -f1)" "$0")
    echo "${conoha_main_tail}" | head -n +"$(echo "${conoha_main_tail}" | grep -n "## main end DO NOT REMOVE ##$" | cut -d: -f1)"
  )

  # shellcheck disable=1004,SC2016
  get_sub_cmds='''
    echo "${conoha_main_method_content}" \
      | grep -Eo "^ {4}[^ ]+ *)" \
      | grep -Ev "^ {4}(subcmds|\*|complete)" \
      | tr -d "\n" \
      | sed "s/ *//g; s/)/ /g; s/|/ /g"
  '''

  # shellcheck disable=1004,SC2016
  get_sub2_cmds='''
    echo "${conoha_main_method_content}" \
      | grep -Eo "^( {4}| {8})[^ ]+ *)" \
      | grep -Ev "^ {4}(subcmds|\*)|^ {8}subcmds" \
      | tr -d "\n" \
      | sed "s/.* \(${sub_command} *)[^\*]*\).*/\1/g; s/^${sub_command} *)//g; s/ *//g; s/)/ /g; s/|/ /g"
  '''

  case "${sub_command}" in
    subcmds)
      # grep '^    [^ ]*)[ ]*$' ./conoha | grep -v subcmds | tr '\n' ' ' | sed 's/[ \*]//g; s/)/ /g; s/|/ /;'
      #echo "configure flavor image port servers sg securitygroup subnet tools"
      eval "${get_sub_cmds}" ;;
    complete)
      case "${sub2_command}" in
        subcmds) true ;;
        *      ) echo ". $(cd "$(dirname "$0")"; pwd)/$(basename -- "$0")" ;;
      esac ;;
    configure)
      case "${sub2_command}" in
        subcmds) true ;;
        *      ) ConoHaConfigure "$@" ;;
      esac ;;
    flavors)
      case "${sub2_command}" in
        subcmds     ) eval "${get_sub2_cmds}" ;;
        list        ) ConoHaFlavorsList "$@" ;;
        list-sumally) ConoHaFlavorsListSumally "$@" ;;
        *           ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    images)
      case "${sub2_command}" in
        subcmds     ) eval "${get_sub2_cmds}" ;;
        list        ) ConoHaImagesList "$@" ;;
        list-sumally) ConoHaImagesListSumally "$@" ;;
        *           ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    keypairs)
      case "${sub2_command}" in
        subcmds) eval "${get_sub2_cmds}" ;;
        list   ) ConoHaKeypairsList "$@" ;;
        upload ) ConoHaKeypairsUpload "$@" ;;
        *      ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    networks)
      case "${sub2_command}" in
        subcmds             ) eval "${get_sub2_cmds}" ;;
        create-local-network) ConoHaNetworksCreateLocalNetwork "$@" ;;
        delete              ) ConoHaNetworksDelete "$@" ;;
        list                ) ConoHaNetworksList "$@" ;;
        *                   ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    ports)
      case "${sub2_command}" in
        subcmds     ) eval "${get_sub2_cmds}" ;;
        create      ) ConoHaPortsCreate "$@" ;;
        delete      ) ConoHaPortsDelete "$@" ;;
        list        ) ConoHaPortsList "$@" ;;
        list-sumally) ConoHaPortsListSumally "$@" ;;
        *           ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    securitygroups)
      case "${sub2_command}" in
        subcmds     ) eval "${get_sub2_cmds}" ;;
        list        ) ConoHaSecurityGroupsList "$@" ;;
        list-sumally) ConoHaSecurityGroupsListSumally "$@" ;;
        *           ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    servers)
      case "${sub2_command}" in
        subcmds            ) eval "${get_sub2_cmds}" ;;
        attach-port        ) ConoHaServersAttachPort "$@" ;;
        create             ) ConoHaServersCreate "$@" ;;
        delete             ) ConoHaServersDelete "$@" ;;
        list-attached-ports) ConoHaServersListAttachedPorts "$@" ;;
        list               ) ConoHaServersList "$@" ;;
        list-detail        ) ConoHaServersListDetail "$@" ;;
        list-detail-sumally) ConoHaServersListDetailSumally "$@" ;;
        start              ) ConoHaServersStart "$@" ;;
        stop               ) ConoHaServersStop "$@" ;;
        *                  ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    subnets)
      case "${sub2_command}" in
        subcmds            ) eval "${get_sub2_cmds}" ;;
        create-local-subnet) ConoHaSubnetsCreateLocalSubnet "$@" ;;
        delete             ) ConoHaSubnetsDelete "$@" ;;
        list               ) ConoHaSubnetsList "$@" ;;
        *                  ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    tools)
      case "${sub2_command}" in
        subcmds                                 ) eval "${get_sub2_cmds}" ;;
        servers-create-k8s-cluster-single-master) ConoHaToolsServersCreateK8sClusterSingleMaster "$@" ;;
        subnet-list-additional-ipaddresses      ) ConoHaToolsSubnetsListAdditionalIPAddresses "$@" ;;
        get-image-ubuntu1804                    ) ConoHaToolsGetImageUbuntu1804 "$@" ;;
        get-flavor-512mb                        ) ConoHaToolsGetFlavor512MB "$@" ;;
        get-flavor-1gb                          ) ConoHaToolsGetFlavor1GB "$@" ;;
        *                                       ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    version)
      case "${sub2_command}" in
        subcmds) true ;;
        *      ) echo "${CONOHA_PROGRAM_NAME} ${CONOHA_VERSION}" ;;
      esac ;;
    *)
      PrintStderr "allowed value: $(bash "$0" subcmds)"; return 1 ;;
  esac
} && ConohaMain "$@"  ## main end DO NOT REMOVE ##

# -- Non Interactive ----------------
else
# -- Interactive ----------------


##
# conoha command as bash-completion
#
# The following function is for bash-completion.
# When executing script as a command,
# the following function is not defined nor executed.
#
# shellcheck disable=SC2016,SC2034,SC2039
##
__complete_conoha() {
  local cur prev cword
  _get_comp_words_by_ref -n : cur prev cword
  if [ "${cword}" -eq 1 ]; then
    eval 'COMPREPLY=( $(compgen -W "'"$(conoha subcmds)"'" -- "${cur}") )'
  elif [ "${cword}" -eq 2 ]; then
    eval 'COMPREPLY=( $(compgen -W "'"$(conoha "${prev}" subcmds)"'" -- "${cur}") )'
  fi
}
# shellcheck disable=SC2039
{ ! command -v complete 1>/dev/null; } || complete -F __complete_conoha conoha

# -- Interactive ----------------
fi
