#!/bin/sh
# shellcheck disable=SC1090

##
# If in non interactive shell ( "$-" not containing "i" ),
# execute script as command.
##
if ! { echo "$-" | grep -q i; }; then
# -- Non Interactive ----------------

# If an error occurs, EXIT abnormally.
set -e -o pipefail

##
# constants
##
CONOHA_VERSION='0.0.2'
CONOHA_PROGRAM_NAME="$(basename -- "$0")"



##
# common
##
PrintStderr() {
  echo "$*" 1>&2
}

CheckDependency() {
  code=0
  for cmd in "$@"; do
    if ! command -v -- "${cmd}" 1>/dev/null; then
      PrintStderr "\"${cmd}\" not found in \$PATH"
      code=$((code+1))
    fi
  done
  [ "${code}" -eq 0 ] || exit 1
}

CONOHA_CREDENTIALS_FILE="$HOME/.conoha/credentials"

ConoHaConfigure() {
  if [ -e "${CONOHA_CREDENTIALS_FILE}" ]; then
    PrintStderr "already exist: ${CONOHA_CREDENTIALS_FILE}"
    exit 1
  fi
  mkdir -p "$(dirname "${CONOHA_CREDENTIALS_FILE}")"
  echo "ref. https://manage.conoha.jp/API/"
  printf '%s' 'ConoHa Tenant ID: '
  read -r CONOHA_TENANT_ID
  if [ -z "${CONOHA_TENANT_ID}" ]; then
    PrintStderr "Credentials parameters are not set"
    exit 1
  fi
  printf '%s' 'ConoHa API Account Username: '
  read -r CONOHA_API_ACCOUNT_USERNAME
  stty -echo
  printf '%s' 'ConoHa API Account Password: '
  if [ -z "${CONOHA_API_ACCOUNT_USERNAME}" ]; then
    PrintStderr "Credentials parameters are not set"
    exit 1
  fi
  read -r CONOHA_API_ACCOUNT_PASSWORD
  stty echo
  echo
  if [ -z "${CONOHA_API_ACCOUNT_PASSWORD}" ]; then
    PrintStderr "Credentials parameters are not set"
    exit 1
  fi
  {
    echo "CONOHA_TENANT_ID=${CONOHA_TENANT_ID}"
    echo "CONOHA_API_ACCOUNT_USERNAME=${CONOHA_API_ACCOUNT_USERNAME}"
    echo "CONOHA_API_ACCOUNT_PASSWORD=${CONOHA_API_ACCOUNT_PASSWORD}"
  } > "${CONOHA_CREDENTIALS_FILE}"
  chown -R "$(id -u)":"$(id -g)" "$(dirname "${CONOHA_CREDENTIALS_FILE}")"
  chmod -R go-rwx "$(dirname "${CONOHA_CREDENTIALS_FILE}")"
}

ConoHaSetCredentials() {
  CheckDependency curl jq
  if [ -f "${CONOHA_CREDENTIALS_FILE}" ] && [ -r "${CONOHA_CREDENTIALS_FILE}" ]; then
    . "${CONOHA_CREDENTIALS_FILE}"
  else
    PrintStderr "Credentials file does not found: ${CONOHA_CREDENTIALS_FILE}"
    PrintStderr "For set credentials, run:"
    PrintStderr "  $ conoha configure"
    exit 1
  fi
  conoha_api_endpoint="https://identity.tyo1.conoha.io/v2.0/tokens"
  CONOHA_TOKEN=$(
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -d '{"auth":{"passwordCredentials":{"username":"'"${CONOHA_API_ACCOUNT_USERNAME}"'","password":"'"${CONOHA_API_ACCOUNT_PASSWORD}"'"},"tenantId":"'"${CONOHA_TENANT_ID}"'"}}' \
      | jq -r '.access.token.id'
  )
  if [ -z "${CONOHA_TOKEN}" ] || [ "${CONOHA_TOKEN}" = null ]; then
    PrintStderr "CONOHA_TOKEN is null"
    PrintStderr "Please check credentials file: ${CONOHA_CREDENTIALS_FILE}"
    exit 1
  fi
}

ConoHaBase64Encode() {
CheckDependency base64 openssl
if command -v base64 1>/dev/null; then
  base64 </dev/stdin
elif command -v openssl 1>/dev/null; then
  openssl base64 </dev/stdin
else
  echo "You need \"base64\" or \"openssl\""
  exit 1
fi
}

ConoHaJSON() {
  if command -v jq 1>/dev/null; then
    "$(command -v jq)" . </dev/stdin
  elif command -v python 1>/dev/null; then
    "$(command -v python)" -m json.tool </dev/stdin
  elif command -v ruby 1>/dev/null; then
    "$(command -v ruby)" -r json -e 'puts JSON.pretty_generate(JSON.parse(STDIN.read))' </dev/stdin
  elif command -v perl 1>/dev/null; then
    # shellcheck disable=SC2016
    "$(command -v perl)" -MEncode -MJSON::PP -e '$json=JSON::PP->new->pretty; $obj=$json->decode(decode_utf8(join("",(<STDIN>)))); print encode_utf8($json->encode($obj))'
  else
    # plain output
    cat /dev/stdin
  fi
}



##
# flavors
##
ConoHaFlavorsList() {
  # ref. https://www.conoha.jp/docs/compute-get_flavors_list.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/flavors"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}"
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaFlavorsListShort() {
  conoha_api_response=$(ConoHaFlavorsList "$@")
  echo "${conoha_api_response}" | jq '.flavors[] | { id, name }' | jq -s '{ flavors: . }'
}



##
# images
##
ConoHaImagesList() {
  # ref. https://www.conoha.jp/docs/compute-get_images_list.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/images"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H "Accept: application/json" \
      -H "X-Auth-Token: ${CONOHA_TOKEN}"
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaImagesListShort() {
  conoha_api_response=$(ConoHaImagesList "$@")
  echo "${conoha_api_response}" | jq '.images[] | { id, name }' | jq -s '{ images: . }'
}



##
# ports
##
ConoHaPortsList() {
  # ref. https://www.conoha.jp/docs/neutron-get_ports_list.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/ports"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}"
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaPortsListShort() {
  conoha_api_response=$(ConoHaPortsList "$@")
  echo "${conoha_api_response}" | jq '.ports[] | { id, network_id, fixed_ips }' | jq -s '{ ports: . }'
}

ConoHaPortsCreate() {
  conoha_network_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Network ID (e.g. ffffffff-ffff-ffff-ffff-ffffffffffff)" "See:" "  $ conoha subnets list")"}"
  conoha_subnet_id="${2:?"$(printf '\n%s\n%s\n%s' "Set \$2 as Subnet ID (e.g. ffffffff-ffff-ffff-ffff-ffffffffffff)" "See:" "  $ conoha subnets list")"}"
  conoha_ipaddress="${3:?"$(printf '\n%s\n%s\n%s' "Set \$3 as IPAddress (e.g. 8.8.8.8)" "See:" "  $ conoha subnets list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_default_security_groups="$(ConoHaSecurityGroupsList | jq '.security_groups[] | select( (.name == "gncs-ipv4-all") or (.name == "default") ) | .id' | jq -cs .)"
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/ports"
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d'{"port":{"network_id":"'"${conoha_network_id}"'","fixed_ips":[{"ip_address":"'"${conoha_ipaddress}"'","subnet_id":"'"${conoha_subnet_id}"'"}],"security_groups":'"${conoha_default_security_groups}"'}}'
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaPortsDelete() {
  conoha_port_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Port ID (e.g. ffffffff-ffff-ffff-ffff-ffffffffffff)" "See:" "  $ conoha ports list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/${conoha_port_id}"
    curl -sS -X DELETE "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}"
  )
  echo "${conoha_api_response}" | jq .
}



##
# securitygroups
##
ConoHaSecurityGroupsList() {
  # ref. https://www.conoha.jp/docs/neutron-get_rules_on_secgroup.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/security-groups"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}"
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaSecurityGroupsListShort() {
  conoha_api_response=$(ConoHaSecurityGroupsList "$@")
  echo "${conoha_api_response}" | jq '.security_groups[] | { tenant_id, description, id, name }' | jq -s '{ security_groups: . }'
}



##
# servers
##
ConoHaServersAttachPort() {
  conoha_server_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Server ID (e.g. ffffffff-ffff-ffff-ffff-ffffffffffff)" "See:" "  $ conoha servers list")"}"
  conoha_port_id="${2:?"$(printf '\n%s\n%s\n%s' "Set \$2 as Port ID (e.g. ffffffff-ffff-ffff-ffff-ffffffffffff)" "See:" "  $ conoha ports list")"}"
  ConoHaSetCredentials
  conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/${conoha_server_id}/os-interface"
  conoha_api_response=$(
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d '{"interfaceAttachment":{"port_id":"'"${conoha_port_id}"'"}}'
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersCreate() {
  # ref. https://www.conoha.jp/docs/compute-create_vm.html
  conoha_vm_flavor_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as VM Flavor ID (e.g. d92b02ce-9a4f-4544-8d7f-ae8380bc08e7)" "See:" "  $ conoha flavors list")"}"
  conoha_vm_image_id="${2:?"$(printf '\n%s\n%s\n%s' "Set \$2 as VM Image ID (e.g. 2322444e-9000-47a8-a425-45fdef52d031)" "See:" "  $ conoha images list")"}"
  conoha_vm_root_password="${3:?"$(printf '\n%s' "Set \$3 as VM OS Password (e.g. P@ssw0rd)")"}"
  conoha_vm_userdata_base64_encoded="${4:?"$(printf '\n%s\n%s\n%s' "Set \$4 as base64-encoded userdata (e.g. IyEvYmluL2Jhc2gK...)" "If you want to encode base64, run:" "  $ cat \"\${YOUR_USER_DATA_FILE:?}\" | openssl base64")"}"
  conoha_vm_name_tag="${5:?"$(printf '\n%s' "Set \$5 as VM Name Tag (e.g. bastion)")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers"
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d '{"server":{"flavorRef":"'"${conoha_vm_flavor_id}"'","imageRef":"'"${conoha_vm_image_id}"'","adminPass":"'"${conoha_vm_root_password}"'","security_groups":[{"name":"default"},{"name":"gncs-ipv4-all"}],"user_data":"'"${conoha_vm_userdata_base64_encoded}"'","metadata":{"instance_name_tag":"'"${conoha_vm_name_tag}"'"}}}'
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersDelete() {
  # ref. https://www.conoha.jp/docs/compute-delete_vm.html
  conoha_server_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Server ID (e.g. ffffffff-ffff-ffff-ffff-ffffffffffff)" "See:" "  $ conoha servers list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/${conoha_server_id}"
    curl -sS -X DELETE "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}"
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersListDetail() {
  # ref. https://www.conoha.jp/docs/compute-get_vms_detail.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/detail"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}"
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersListDetailShort() {
  conoha_api_response=$(ConoHaServersListDetail "$@")
  echo "${conoha_api_response}" | jq '.servers[] | { name_tag: .metadata.instance_name_tag, id, name, status, addresses: [(.addresses[] | .[] | .addr)] }' | jq -s '{ servers: . }'
}

ConoHaServersListAttachedPorts() {
  # ref. https://www.conoha.jp/docs/compute-get_attached_ports_list.html
  conoha_server_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Server ID (e.g. ffffffff-ffff-ffff-ffff-ffffffffffff)" "See:" "  $ conoha servers list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/${conoha_server_id}/os-interface"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}"
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersStart() {
  conoha_server_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Server ID (e.g. ffffffff-ffff-ffff-ffff-ffffffffffff)" "See:" "  $ conoha servers list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/${conoha_server_id}/action"
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d '{"os-start":null}'
  )
  echo "${conoha_api_response}" | jq .
}

ConoHaServersStop() {
  conoha_server_id="${1:?"$(printf '\n%s\n%s\n%s' "Set \$1 as Server ID (e.g. ffffffff-ffff-ffff-ffff-ffffffffffff)" "See:" "  $ conoha servers list")"}"
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://compute.tyo1.conoha.io/v2/${CONOHA_TENANT_ID}/servers/${conoha_server_id}/action"
    curl -sS -X POST "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
      -d '{"os-stop":null}'
  )
  echo "${conoha_api_response}" | jq .
}



##
# subnets
##
ConoHaSubnetsList() {
  # ref. https://www.conoha.jp/docs/neutron-get_subnets_list.html
  ConoHaSetCredentials
  conoha_api_response=$(
    conoha_api_endpoint="https://networking.tyo1.conoha.io/v2.0/subnets"
    curl -sS -X GET "${conoha_api_endpoint}" \
      -H 'Accept: application/json' \
      -H "X-Auth-Token: ${CONOHA_TOKEN}" \
  )
  echo "${conoha_api_response}" | jq .
}



##
# tools
##
ConoHaToolsSubnetsListAdditionalIPAddresses() {
  conoha_api_response=$(ConoHaSubnetsList "$@")
  echo "${conoha_api_response}" | jq '.subnets[] | select(.cidr | match("/32"))' | jq -s '{ subnets: . }'
}

ConoHaToolsGetUbuntu1804Image() {
  conoha_api_response=$(ConoHaImagesList "$@")
  echo "${conoha_api_response}" | jq '.images | sort_by(.name) | .[] | select(.name | match("vmi-ubuntu-18.04-amd64-20gb"))'
}

ConoHaToolsGet512MBRAMFlavor() {
  conoha_api_response=$(ConoHaFlavorsList "$@")
  echo "${conoha_api_response}" | jq '.flavors[] | select(.name == "g-512mb")'
}



##
# main
##
ConohaMain() {  ## main start DO NOT REMOVE ##
  sub_command="$1"
  sub2_command="$2"

  if [ "$2" ]; then shift || true; fi
  if [ "$1" ]; then shift || true; fi

  # shellcheck disable=SC2034
  conoha_main_method_content=$(
    conoha_main_tail=$(tail -n +"$(grep -n "## main start DO NOT REMOVE ##$" "$0" | cut -d: -f1)" "$0")
    echo "${conoha_main_tail}" | head -n +"$(echo "${conoha_main_tail}" | grep -n "## main end DO NOT REMOVE ##$" | cut -d: -f1)"
  )

  # shellcheck disable=1004,SC2016
  get_sub_cmds='''
    echo "${conoha_main_method_content}" \
      | grep -Eo "^ {4}[^ ]+ *)" \
      | grep -Ev "^ {4}(subcmds|\*|complete)" \
      | tr -d "\n" \
      | sed "s/ *//g; s/)/ /g; s/|/ /g"
  '''

  # shellcheck disable=1004,SC2016
  get_sub2_cmds='''
    echo "${conoha_main_method_content}" \
      | grep -Eo "^( {4}| {8})[^ ]+ *)" \
      | grep -Ev "^ {4}(subcmds|\*)|^ {8}subcmds" \
      | tr -d "\n" \
      | sed "s/.* \(${sub_command} *)[^\*]*\).*/\1/g; s/^${sub_command} *)//g; s/ *//g; s/)/ /g; s/|/ /g"
  '''

  case "${sub_command}" in
    subcmds)
      # grep '^    [^ ]*)[ ]*$' ./conoha | grep -v subcmds | tr '\n' ' ' | sed 's/[ \*]//g; s/)/ /g; s/|/ /;'
      #echo "configure flavor image port servers sg securitygroup subnet tools"
      eval "${get_sub_cmds}" ;;
    complete)
      case "${sub2_command}" in
        subcmds) true ;;
        *      ) echo ". $(cd "$(dirname "$0")"; pwd)/$(basename -- "$0")" ;;
      esac ;;
    configure)
      case "${sub2_command}" in
        subcmds) true ;;
        *      ) ConoHaConfigure "$@" ;;
      esac ;;
    flavors)
      case "${sub2_command}" in
        subcmds   ) eval "${get_sub2_cmds}" ;;
        list      ) ConoHaFlavorsList "$@" ;;
        list-short) ConoHaFlavorsListShort "$@" ;;
        *         ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    images)
      case "${sub2_command}" in
        subcmds   ) eval "${get_sub2_cmds}" ;;
        list      ) ConoHaImagesList "$@" ;;
        list-short) ConoHaImagesListShort "$@" ;;
        *         ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    ports)
      case "${sub2_command}" in
        subcmds   ) eval "${get_sub2_cmds}" ;;
        create    ) ConoHaPortsCreate "$@" ;;
        delete    ) ConoHaPortsDelete "$@" ;;
        list      ) ConoHaPortsList "$@" ;;
        list-short) ConoHaPortsListShort "$@" ;;
        *         ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    securitygroups)
      case "${sub2_command}" in
        subcmds   ) eval "${get_sub2_cmds}" ;;
        list      ) ConoHaSecurityGroupsList "$@" ;;
        list-short) ConoHaSecurityGroupsListShort "$@" ;;
        *         ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    servers)
      case "${sub2_command}" in
        subcmds            ) eval "${get_sub2_cmds}" ;;
        attach-port        ) ConoHaServersAttachPort "$@" ;;
        create             ) ConoHaServersCreate "$@" ;;
        delete             ) ConoHaServersDelete "$@" ;;
        list-attached-ports) ConoHaServersListAttachedPorts "$@" ;;
        list-detail        ) ConoHaServersListDetail "$@" ;;
        list-detail-short  ) ConoHaServersListDetailShort "$@" ;;
        start              ) ConoHaServersStart "$@" ;;
        stop               ) ConoHaServersStop "$@" ;;
        *                  ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    subnets)
      case "${sub2_command}" in
        subcmds) eval "${get_sub2_cmds}" ;;
        list   ) ConoHaSubnetsList "$@" ;;
        *      ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    tools)
      case "${sub2_command}" in
        subcmds                           ) eval "${get_sub2_cmds}" ;;
        subnet-list-additional-ipaddresses) ConoHaToolsSubnetsListAdditionalIPAddresses "$@" ;;
        get-ubuntu-1804-image             ) ConoHaToolsGetUbuntu1804Image "$@" ;;
        get-512mb-ram-flavor              ) ConoHaToolsGet512MBRAMFlavor "$@" ;;
        *                                 ) PrintStderr "allowed value: $(bash "$0" "${sub_command}" subcmds)"; return 1 ;;
      esac ;;
    version)
      case "${sub2_command}" in
        subcmds) true ;;
        *      ) echo "${CONOHA_PROGRAM_NAME} ${CONOHA_VERSION}" ;;
      esac ;;
    *)
      PrintStderr "allowed value: $(bash "$0" subcmds)"; return 1 ;;
  esac
} && ConohaMain "$@"  ## main end DO NOT REMOVE ##

# -- Non Interactive ----------------
else
# -- Interactive ----------------


##
# conoha command as bash-completion
#
# The following function is for bash-completion.
# When executing script as a command,
# the following function is not defined nor executed.
#
# shellcheck disable=SC2016,SC2034,SC2039
##
__complete_conoha() {
  local cur prev cword
  _get_comp_words_by_ref -n : cur prev cword
  if [ "${cword}" -eq 1 ]; then
    eval 'COMPREPLY=( $(compgen -W "'"$(conoha subcmds)"'" -- "${cur}") )'
  elif [ "${cword}" -eq 2 ]; then
    eval 'COMPREPLY=( $(compgen -W "'"$(conoha "${prev}" subcmds)"'" -- "${cur}") )'
  fi
}
# shellcheck disable=SC2039
{ ! command -v complete 1>/dev/null; } || complete -F __complete_conoha conoha

# -- Interactive ----------------
fi
